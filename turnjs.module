<?php
/**
 * @file
 * A light-weight, customizable turn.js plugin for Jquery 1.3 or later
 */

/**
 * Implements hook_theme().
 */
function turnjs_theme() {

  return array(
    'turnjs_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
      ),
    ),
    'turnjs_image_formatter' => array(
      'variables' => array(
        'items' => array(),
        'node' => NULL,
        'field' => array(),
        'display_settings' => array(),
      ),
      'file' => 'turnjs.theme.inc',
    ),
  );

};

/**
 * Implements hook_field_formatter_info().
 */
function turnjs_field_formatter_info() {

  return array(
    'turnjs' => array(
      'label' => t('turn.js'),
      'field types' => array('image'),
      'settings' => array(
        'turnjs_image_style' => '',
        'turnjs_page_width' => '',
        'turnjs_page_height' => '',
        'turnjs_page_display' => 'double',
      ),
    ),
  );

}

/**
 * Implementation.
 */
function turnjs_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);

  $element['turnjs_image_style'] = array(
    '#title' => t('Turn.js page image style'),
    '#type' => 'select',
    '#default_value' => $settings['turnjs_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Image style to use in Turn.js. Note: The first image will determine the flip-book page dimensions.'),
  );

  $element['turnjs_page_display'] = array(
    '#title' => t('Turn.js page display size'),
    '#type' => 'select',
    '#default_value' => $settings['turnjs_page_display'],
    "#options" => array(
      'single' => t('Single'),
      'double' => t('Double'),
    ),
    '#description' => t('Whether to show single page or double pages.'),
  );

  return $element;

};

/**
 * Implements hook_field_formatter_settings_summary().
 */
function turnjs_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);

  if (isset($image_styles[$settings['turnjs_image_style']])) {
    $summary[] = t('Turn.js Image Style: @style', array('@style' => $image_styles[$settings['turnjs_image_style']]));
  }
  else {
    $summary[] = t('Turn.js image style: Original image');
  };

  $summary[] = t('Turn.js display style: @display', array('@display' => ucfirst($settings['turnjs_page_display'])));

  return implode('<br />', $summary);

};

/**
 * Implements hook_field_formatter_view().
 */
function turnjs_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  _turnjs_load_header();

  $element = array();

  $element[0] = array(
    '#theme' => 'turnjs_image_formatter',
    '#items' => $items,
    '#node' => $entity,
    '#field' => $field,
    '#display_settings' => $display['settings'],
    '#prefix' => '<div class="drupal-turnjs">',
    '#suffix' => '</div>',
  );

  // Look for the largest dimensions and apply.
  $dimensions = array(
    'width' => '',
    'height' => '',
  );

  $max_width = 0;
  $max_height = 0;

  if (!empty($display['settings']['turnjs_image_style'])) {

    foreach ($items as $item) {

      $image_info = image_get_info(image_style_path($display['settings']['turnjs_image_style'], $item['uri']));

      if ($image_info['width'] > $max_width) {
        $max_width = $image_info['width'];
      }

      if ($image_info['height'] > $max_height) {
        $max_height = $image_info['height'];
      }

    }

  }
  else {

    foreach ($items as $item) {

      if ($item['width'] > $max_width) {
        $max_width = $item['width'];
      }

      if ($item['height'] > $max_height) {
        $max_height = $item['height'];
      }

    }

  }

  // Change the display's size depending on settings.
  if ($display['settings']['turnjs_page_display'] == "single") {

    $width = $max_width * 1;

  }
  else {

    $width = $max_width * 2;

  }

  $height = $max_height;
  $settings['turnjs']['page-width'] = $width;
  $settings['turnjs']['page-height'] = $height;
  $settings['turnjs']['page-display'] = $display['settings']['turnjs_page_display'];
  drupal_add_js($settings, 'setting');

  return $element;
};

/**
 * Loads the various js and css files.
 */
function _turnjs_load_header() {
  // Don't add the JS multiple times.
  static $already_added = FALSE;
  if ($already_added) {
    return;
  }

  if (turnjs_get_library_file()) {

    drupal_add_js(turnjs_get_library_file());
    drupal_add_js(drupal_get_path('module', 'turnjs') . '/js/turnjs.js');

  }
  else {

    drupal_set_message(t("Turn.js library can't be found! Place it in <em>sites/all/libraries</em>."));

  }

  $already_added = TRUE;

}

/**
 * Helper function gets the path to the library directory.
 */
function turnjs_get_library_path() {

  // If Libraries API is enabled, make sure it exists before pointing there.
  if (function_exists('libraries_get_path') && file_exists(libraries_get_path('turn.js'))) {
    $path = libraries_get_path('turn.js');
  }
  else {
    $path = FALSE;
  }

  return $path;
}

/**
 * Helper function gets the path to the library Javascript file.
 */
function turnjs_get_library_file() {

  // Try loading the minified version. If not found, try the normal version.
  if (file_exists(turnjs_get_library_path() . '/turn.min.js')) {
    return turnjs_get_library_path() . '/turn.min.js';
  }
  elseif (file_exists(turnjs_get_library_path() . '/turn.js')) {
    return turnjs_get_library_path() . '/turn.js';
  }
  else {
    return FALSE;
  }
}
